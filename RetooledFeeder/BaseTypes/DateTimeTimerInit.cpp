/*
 * DateTimeTimerInit.cpp
 *
 * Created: 05.06.2014 13:09:26
 *  Author: Mihalych
 */ 
//---------------------------------------------------------------------------

#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>

#include "DateTime.h"
//---------------------------------------------------------------------------

void InitTimer(void)
{
	if(ASSR & (1<<AS2))	//Если это второй вход то
	{
		_delay_ms(1000);
		
		if (ASSR & (1<<TCN2UB | 1<<OCR2UB | TCR2UB) ) 	// проверяем есть ли хоть один бит флаговый
		{
			InitTimer();						// Если есть, то отправляем на повторный цикл ожидания
		}
		else// Если все чисто, то можно запускать прерывания
		{
			TIFR  |= 1<<OCF2 | 1<< TOV2;				// Сбрасываем флаги прерываний, на всякий случай.
			TIMSK |= 1<< TOIE2;							// Разрешаем прерывание по переполнению
			
			return;
		}
	}
	
	TIMSK &=~(1<<OCIE2 | 1<< TOIE2);		// Запрещаем прерывания таймера 2
	ASSR  = 1<<AS2;							// Включаем асинхронный режим
	TCNT2 = 0;
	//TCCR2 = 5<<CS20; 						// Предделитель на 128 на 32768 даст 256 тиков в секунду
	// Что даст 1 прерывание в секунду.
	
	
	//TCCR2 |= 1 << CS22;//это 2 раза в сек
	
	//TCCR2 |= 1 << CS20;//нету делителя, что будет 32768 / 256 = 128 раз в сек.
	TCCR2 |= _BV(CS22) | _BV(CS20) ;//делитель 128, что будет 32768 / (256 * 128) = 1 раз в сек.
	
	InitTimer();					// Прогоняем через диспетчер, чтобы зайти снова.
}
//---------------------------------------------------------------------------

ISR(TIMER2_OVF_vect)
{
	DateTime::OnSecondsTick();
	//DateTime::OnMillisecondsTick();
}
//---------------------------------------------------------------------------